
    ### Django in html ###
    '.text.html.basic':
        'for Loop':
            'prefix': 'for'
            'body': '{% for ${1:i} in ${1:List} %}\n\n{% endfor %}'

        'Django Syntax':
            'prefix': '%'
            'body': '{% $1 %}'

        'csrf':
            'prefix': 'csrf'
            'body': '{% csrf_token %}'

        'else':
            'prefix': 'el'
            'body': '{% else %}\n{%    %}'

        'if':
            'prefix': 'if'
            'body': '{% if $1 %}\n\n{% endif %}'

        'url with name nd Id':
            'prefix': 'url'
            'body': "{% url '${1:URL NAME}' ${1:CONTEXTNAME}.id %}"

        'character field':
            'prefix': 'mchar'
            'body': '${1:FIELDNAME} = models.CharField(max_length=$1)'

        'date field':
            'prefix': 'mdate'
            'body': '${1:FIELDNAME} = models.DateField()'

        'date and time field':
            'prefix': 'mdatetime'
            'body': '${1:FIELDNAME} = models.DateTimeField()'

        'email field':
            'prefix': 'memail'
            'body': '${1:FIELDNAME} = models.EmailField()'

        'file field':
            'prefix': 'mfile'
            'body': '${1:FIELDNAME} = models.FileField()'

        "Model TextField":
            'prefix': "mtext"
            'body': "${1:FIELDNAME} = models.TextField(${2:blank=True})$0"

        "Form ImageField":
            'prefix': "fimg"
            'body': "${1:FIELDNAME} = forms.ImageField($2)$0"

         "Form FileField":
            'prefix': "ffile"
            'body': "${1:FIELDNAME} = forms.FileField($2)$0"
        "Form FilePathField":
            'prefix': "ffilepath"
            'body': "${1:FIELDNAME} = forms.FilePathField($2)$0"
        "Form FloatField":
            'prefix': "mfloat"
            'body': "${1:FIELDNAME} = forms.FloatField($2)$0"
        "Form IntegerField":
            'prefix': "fint"
            'body': "${1:FIELDNAME} = forms.IntegerField($2)$0"
        "Form IPAddressField":
            'prefix': "fip"
            'body': "${1:FIELDNAME} = forms.IPAddressField($2)$0"
        "Form ModelChoiceField":
            'prefix': "fmochoice"
            'body': "${1:FIELDNAME} = forms.ModelChoiceField($2)$0"
        "Form ModelMultipleChoiceField":
            'prefix': "fmomuchoice"
            'body': "${1:FIELDNAME} = forms.ModelMultipleChoiceField($2)$0"
        "Form MultipleChoiceField":
            'prefix': "fmuchoice"
            'body': "${1:FIELDNAME} = forms.MultipleChoiceField($2)$0"
        "Form MultiValueField":
            'prefix': "fmuval"
            'body': "${1:FIELDNAME} = forms.MultiValueField($2)$0"
        "Form NullBooleanField":
            'prefix': "fnullbool"
            'body': "${1:FIELDNAME} = forms.NullBooleanField($2)$0"
        "Form RegexField":
            'prefix': "fregex"
            'body': "${1:FIELDNAME} = forms.RegexField($2)$0"
        "Form SlugField":
            'prefix': "fslug"
            'body': "${1:slug} = forms.SlugField($2)$0"
        "Form SplitDateTimeField":
            'prefix': "fsdatetime"
            'body': "${1:FIELDNAME} = forms.SplitDateTimeField($2)$0"
        "Form TimeField":
            'prefix': "ftime"
            'body': "${1:FIELDNAME} = forms.TimeField($2)$0"
        "Form TypedChoiceField":
            'prefix': "ftchoice"
            'body': "${1:FIELDNAME} = forms.TypedChoiceField($2)$0"
        "Form TypedMultipleChoiceField":
            'prefix': "ftmuchoice"
            'body': "${1:FIELDNAME} = forms.TypedMultipleChoiceField($2)$0"
        "Form URLField":
            'prefix': "furl"
            'body': "${1:FIELDNAME} = forms.URLField($2)"

        "ModelForm Skeleton":
            'prefix': "modelform"
            'body': '''
            class ${1:FORMNAME}Form(forms.ModelForm):
                ${3:# TODO: Define other fields here}
                $0
                class Meta:
                    model = $1
                    fields = [$2]
              '''

        "Form Skeleton":
            'prefix': "form"
            'body': '''
            class ${1:FORMNAME}Form(forms.form):
                ${2:# TODO: Define form fields here}
                $0
                def __init__(self, *args, **kwargs):
                    super($1Form, self).__init__(*args, **kwargs)

                    def clean(self):
                        cleaned_data = super($1Form, self).clean()
                        return cleaned_data

                        def save(self):
                            cleaned_data = super($1Form, self).clean()
    '''

        "Model Skeleton":
            'prefix': "model"
            'body': '''
            class ${1:MODELNAME}(models.Model):
                ${2:# TODO: Define fields here}
                $0
                class Meta:
                    verbose_name = '$1'
                    verbose_name_plural = '$1s'

                    def __unicode__(self):
                        pass
    '''
        "CreateView":
            'prefix': "createview"
            'body': '''
            class ${1:MODELNAME}CreateView(CreateView):
                model = ${1:MODELNAME}
                form_class = ${2:FORM_CLASS}
                success_url = '${3:SUCCESS_URL}'
                template_name = '${4:TEMPLATE_NAME}'
                $0
    '''

        "DeleteView":
            'prefix': "deleteview"
            'body': '''
            class ${1:MODELNAME}DeleteView(DeleteView):
                model = ${1:MODELNAME}
                template_name = '${2:TEMPLATE_NAME}'
                $0
    '''

        "UpdateView":
            'prefix': "updateview"
            'body': '''
            class ${1:MODELNAME}UpdateView(UpdateView):
                model = ${1:MODELNAME}
                template_name = '${2:TEMPLATE_NAME}'
                $0
    '''

        "Send Mail":
            'prefix': "sendmail"
            'body': '''
      mail.send_mail("${1:Subject}", "${2:Message}", "${3:from@example.com}", ${4:["to@example.com"]}${5:, fail_silently=True}$0)
    '''
